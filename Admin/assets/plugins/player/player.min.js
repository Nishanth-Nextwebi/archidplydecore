(() => { var o = { EVENTS: { READY: "ready", PLAY: "play", PAUSE: "pause", ENDED: "ended", TIMEUPDATE: "timeupdate", PROGRESS: "progress", SEEKED: "seeked", ERROR: "error", FULLSCREEN_CHANGE: "fullscreenChange", PIP_CHANGE: "pipChange", PLAYBACK_RATE_CHANGE: "playbackRateChange", AUDIO_CHANGE: "audioChange", QUALITY_CHANGE: "qualityChange", VOLUME_CHANGE: "volumeChange" }, POST_MESSAGE: !!window.postMessage, METHODS: { PLAY: "play", PAUSE: "pause", GETPAUSED: "getPaused", MUTE: "mute", UNMUTE: "unmute", GETMUTED: "getMuted", SETVOLUME: "setVolume", GETVOLUME: "getVolume", GETDURATION: "getDuration", SETCURRENTTIME: "setCurrentTime", GETCURRENTTIME: "getCurrentTime", SETLOOP: "setLoop", GETLOOP: "getLoop", SETPLAYBACKRATE: "setPlaybackRate", GETPLAYBACKRATE: "getPlaybackRate", REMOVEEVENTLISTENER: "removeEventListener", ADDEVENTLISTENER: "addEventListener" }, DEBUG: !1, VERSION: "0.0.11", CONTEXT: "player.js", isString: function (s) { return Object.prototype.toString.call(s) === "[object String]" }, has: function (s, e) { return Object.prototype.hasOwnProperty.call(s, e) } }; o.METHODS.all = function () { var s = []; for (var e in o.METHODS) o.has(o.METHODS, e) && o.isString(o.METHODS[e]) && s.push(o.METHODS[e]); return s }; o.EVENTS.all = function () { var s = []; for (var e in o.EVENTS) o.has(o.EVENTS, e) && o.isString(o.EVENTS[e]) && s.push(o.EVENTS[e]); return s }; o.addEvent = function (s, e, t) { s && (s.addEventListener ? s.addEventListener(e, t, !1) : s.attachEvent ? s.attachEvent("on" + e, t) : s["on" + e] = t) }; o.isNone = function (s) { return s == null }; o.assert = function (s, e) { if (!s) throw e || "Player.js Assert Failed" }; o.generateUUID = function () { if (crypto && crypto.randomUUID) return crypto.randomUUID(); { let s = URL.createObjectURL(new Blob); return s.substring(s.lastIndexOf("/") + 1) } }; o.isArray = function (s) { return Object.prototype.toString.call(s) === "[object Array]" }; var i = o; var m = class { constructor() { this.data = {} } has(e, t) { if (!this.data.hasOwnProperty(e)) return !1; if (i.isNone(t)) return !0; for (var n = this.data[e], r = 0; r < n.length; r++)if (n[r].id === t) return !0; return !1 } add(e, t, n, r, a) { var u = { id: e, event: t, cb: n, ctx: r, one: a }; this.has(t) ? this.data[t].push(u) : this.data[t] = [u] } execute(e, t, n, r) { if (!this.has(e, t)) return !1; for (var a = [], u = [], f = 0; f < this.data[e].length; f++) { var c = this.data[e][f]; i.isNone(t) || !i.isNone(t) && c.id === t ? (u.push({ cb: c.cb, ctx: c.ctx ? c.ctx : r, data: n }), c.one === !1 && a.push(c)) : a.push(c) } a.length === 0 ? delete this.data[e] : this.data[e] = a; for (var h = 0; h < u.length; h++) { var p = u[h]; p.cb.call(p.ctx, p.data) } } on(e, t, n, r) { this.add(e, t, n, r, !1) } one(e, t, n, r) { this.add(e, t, n, r, !0) } off(e, t) { var n = []; if (!this.data.hasOwnProperty(e)) return n; for (var r = [], a = 0; a < this.data[e].length; a++) { var u = this.data[e][a]; !i.isNone(t) && u.cb !== t ? r.push(u) : i.isNone(u.id) || n.push(u.id) } return r.length === 0 ? delete this.data[e] : this.data[e] = r, n } }, S = m; var E = [], d = class { constructor(e) { var t = this; this.READIED = E, i.isString(e) && (e = document.getElementById(e)), this.elem = e, i.assert(e.nodeName === "IFRAME", 'playerjs.Player constructor requires an Iframe, got "' + e.nodeName + '"'), i.assert(e.src, "playerjs.Player constructor requires a Iframe with a 'src' attribute."), this.origin = new URL(e.src).origin, this.keeper = new S, this.isReady = !1, this.queue = [], this.events = i.EVENTS.all(), this.methods = i.METHODS.all(), i.POST_MESSAGE ? i.addEvent(window, "message", function (n) { t.receive(n) }) : console.error("Post Message is not Available."), E.includes(e.src) ? t.loaded = !0 : this.elem.onload = function () { t.loaded = !0 } } send(e, t, n) { if (e.context = i.CONTEXT, e.version = i.VERSION, t) { let r = i.generateUUID(); e.listener = r, this.keeper.one(r, e.method, t, n) } return !this.isReady && e.value !== "ready" ? (console.debug("Player.queue", e), this.queue.push(e), !1) : (console.debug("Player.send", e, this.origin), this.loaded === !0 && this.elem.contentWindow.postMessage(JSON.stringify(e), this.origin), !0) } receive(e) { if (console.debug("Player.receive", e), e.origin !== this.origin) return !1; let t; try { t = JSON.parse(e.data) } catch (n) { return !1 } if (t.context !== i.CONTEXT) return !1; t.event === "ready" && t.value && t.value.src === this.elem.src && this.ready(t), this.keeper.has(t.event, t.listener) && this.keeper.execute(t.event, t.listener, t.value, this) } ready(e) { if (this.isReady === !0) return !1; e.value.events && (this.events = e.value.events), e.value.methods && (this.methods = e.value.methods), this.isReady = !0, this.loaded = !0; for (var t = 0; t < this.queue.length; t++) { var n = this.queue[t]; console.debug("Player.dequeue", n), e.event === "ready" && this.keeper.execute(n.event, n.listener, !0, this), this.send(n) } this.queue = [] } on(e, t, n) { let r = i.generateUUID(); return e === "ready" ? this.keeper.one(r, e, t, n) : this.keeper.on(r, e, t, n), this.send({ method: "addEventListener", value: e, listener: r }), !0 } off(e, t) { let n = this.keeper.off(e, t); if (console.debug("Player.off", n), n.length > 0) for (var r in n) return this.send({ method: "removeEventListener", value: e, listener: n[r] }), !0; return !1 } supports(e, t) { i.assert(["method", "event"].includes(e), 'evtOrMethod needs to be either "event" or "method" got ' + e), t = i.isArray(t) ? t : [t]; for (var n = e === "event" ? this.events : this.methods, r = 0; r < t.length; r++)if (!n.includes(t[r])) return !1; return !0 } }; function b(s) { return function () { var e = { method: s }, t = Array.prototype.slice.call(arguments); /^get/.test(s) ? (i.assert(t.length > 0, "Get methods require a callback."), t.unshift(e)) : (/^set/.test(s) && (i.assert(t.length !== 0, "Set methods require a value."), e.value = t[0]), t = [e]), this.send.apply(this, t) } } for (let s of i.METHODS.all()) d.prototype.hasOwnProperty(s) || (d.prototype[s] = b(s)); i.addEvent(window, "message", function (s) { var e; try { e = JSON.parse(s.data) } catch (t) { return !1 } if (e.context !== i.CONTEXT) return !1; e.event === "ready" && e.value && e.value.src && E.push(e.value.src) }); var R = d; var v = class { constructor(e, t) { let n = this; this.isReady = !1, this.origin = new URL(document.referrer).origin, this.methods = {}, this.supported = { events: e || i.EVENTS.all(), methods: t || i.METHODS.all() }, this.eventListeners = {}, this.reject = !(window.self !== window.top && i.POST_MESSAGE), this.reject || i.addEvent(window, "message", function (r) { n.receive(r) }) } receive(e) { if (e.origin !== this.origin) return !1; let t = {}; if (typeof e.data == "object") t = e.data; else try { t = window.JSON.parse(e.data) } catch (r) { console.error("JSON Parse Error", r) } if (console.debug("Receiver.receive", e, t), !t.method || t.context !== i.CONTEXT) return !1; if (!i.METHODS.all().includes(t.method)) return this.emit("error", { code: 2, msg: 'Invalid Method "' + t.method + '"' }), !1; let n = i.isNone(t.listener) ? null : t.listener; if (t.method === "addEventListener") this.eventListeners.hasOwnProperty(t.value) ? this.eventListeners[t.value].includes(n) || this.eventListeners[t.value].push(n) : this.eventListeners[t.value] = [n], t.value === "ready" && this.isReady && this.ready(); else if (t.method === "removeEventListener") { if (this.eventListeners.hasOwnProperty(t.value)) { let r = this.eventListeners[t.value].indexOf(n); r > -1 && this.eventListeners[t.value].splice(r, 1), this.eventListeners[t.value].length === 0 && delete this.eventListeners[t.value] } } else this.get(t.method, t.value, n) } get(e, t, n) { var r = this; if (!this.methods.hasOwnProperty(e)) return this.emit("error", { code: 3, msg: 'Method Not Supported"' + e + '"' }), !1; var a = this.methods[e]; if (e.substr(0, 3) === "get") { var u = function (f) { r.send(e, f, n) }; a.call(this, u) } else a.call(this, t) } on(e, t) { this.methods[e] = t } send(e, t, n) { if (console.debug("Receiver.send", e, t, n), this.reject) return console.error("Receiver.send.reject", e, t, n), !1; var r = { context: i.CONTEXT, version: i.VERSION, event: e }; i.isNone(t) || (r.value = t), i.isNone(n) || (r.listener = n); var a = JSON.stringify(r); window.parent.postMessage(a, this.origin === "" ? "*" : this.origin) } emit(e, t) { if (!this.eventListeners.hasOwnProperty(e)) return !1; console.debug("Instance.emit", e, t, this.eventListeners[e]); for (var n = 0; n < this.eventListeners[e].length; n++) { var r = this.eventListeners[e][n]; this.send(e, t, r) } return !0 } ready() { console.debug("Receiver.ready"), this.isReady = !0; var e = { src: window.location.toString(), events: this.supported.events, methods: this.supported.methods }; this.emit("ready", e) || this.send("ready", e) } }, l = v; var g = class { constructor() { this.init() } init() { var e = { duration: 20, currentTime: 0, interval: null, timeupdate: function () { }, volume: 100, mute: !1, playing: !1, loop: !1, play: function () { e.interval = setInterval(function () { e.currentTime += .25, e.timeupdate({ seconds: e.currentTime, duration: e.duration }) }, 250), e.playing = !0 }, pause: function () { clearInterval(e.interval), e.playing = !1 } }, t = this.receiver = new l; t.on("play", function () { var n = this; e.play(), this.emit("play"), e.timeupdate = function (r) { n.emit("timeupdate", r) } }), t.on("pause", function () { e.pause(), this.emit("pause") }), t.on("getPaused", function (n) { n(!e.playing) }), t.on("getCurrentTime", function (n) { n(e.currentTime) }), t.on("setCurrentTime", function (n) { e.currentTime = n }), t.on("getDuration", function (n) { n(e.duration) }), t.on("getVolume", function (n) { n(e.volume) }), t.on("setVolume", function (n) { e.volume = n }), t.on("mute", function () { e.mute = !0 }), t.on("unmute", function () { e.mute = !1 }), t.on("getMuted", function (n) { n(e.mute) }), t.on("getLoop", function (n) { n(e.loop) }), t.on("setLoop", function (n) { e.loop = n }), t.on("setPlaybackRate", function (n) { e.playbackRate = n }), t.on("getPlaybackRate", function (n) { n(e.playbackRate) }) } ready() { this.receiver.ready() } }, O = g; var T = class { constructor(e) { this.init(e) } init(e) { i.assert(e, "VideoJSReceiver requires a player object"); var t = this.receiver = new l; e.on("pause", function () { t.emit("pause") }), e.on("play", function () { t.emit("play") }), e.on("timeupdate", function (n) { var r = e.currentTime(), a = e.duration(); if (!r || !a) return !1; var u = { seconds: r, duration: a }; t.emit("timeupdate", u) }), e.on("ended", function () { t.emit("ended") }), e.on("error", function () { t.emit("error") }), t.on("play", function () { e.play() }), t.on("pause", function () { e.pause() }), t.on("getPaused", function (n) { n(e.paused()) }), t.on("getCurrentTime", function (n) { n(e.currentTime()) }), t.on("setCurrentTime", function (n) { e.currentTime(n) }), t.on("getDuration", function (n) { n(e.duration()) }), t.on("getVolume", function (n) { n(e.volume() * 100) }), t.on("setVolume", function (n) { e.volume(n / 100) }), t.on("mute", function () { e.volume(0) }), t.on("unmute", function () { e.volume(1) }), t.on("getMuted", function (n) { n(e.volume() === 0) }), t.on("getLoop", function (n) { n(e.loop()) }), t.on("setLoop", function (n) { e.loop(n) }), t.on("setPlaybackRate", function (n) { e.playbackRate(n) }), t.on("getPlaybackRate", function (n) { n(e.playbackRate()) }) } ready() { this.receiver.ready() } }, N = T; var y = class { constructor(e) { this.init(e) } init(e) { i.assert(e, "HTML5Adapter requires a video element"); var t = this.receiver = new l; e.addEventListener("playing", function () { t.emit("play") }), e.addEventListener("pause", function () { t.emit("pause") }), e.addEventListener("ended", function () { t.emit("ended") }), e.addEventListener("timeupdate", function () { t.emit("timeupdate", { seconds: e.currentTime, duration: e.duration }) }), e.addEventListener("progress", function () { t.emit("buffered", { percent: e.buffered.length }) }), t.on("play", function () { e.play() }), t.on("pause", function () { e.pause() }), t.on("getPaused", function (n) { n(e.paused) }), t.on("getCurrentTime", function (n) { n(e.currentTime) }), t.on("setCurrentTime", function (n) { e.currentTime = n }), t.on("getDuration", function (n) { n(e.duration) }), t.on("getVolume", function (n) { n(e.volume * 100) }), t.on("setVolume", function (n) { e.volume = n / 100 }), t.on("mute", function () { e.muted = !0 }), t.on("unmute", function () { e.muted = !1 }), t.on("getMuted", function (n) { n(e.muted) }), t.on("getLoop", function (n) { n(e.loop) }), t.on("setLoop", function (n) { e.loop = n }), t.on("setPlaybackRate", function (n) { e.playbackRate = n }), t.on("getPlaybackRate", function (n) { n(e.playbackRate) }) } ready() { this.receiver.ready() } }, L = y; var P = { Player: R, Receiver: l, MockAdapter: O, VideoJSAdapter: N, HTML5Adapter: L, CONTEXT: i.CONTEXT, VERSION: i.VERSION, METHODS: i.METHODS, addEvent: i.addEvent }; typeof define == "function" && define.amd ? define(function () { return P }) : window.playerjs = P; })();
